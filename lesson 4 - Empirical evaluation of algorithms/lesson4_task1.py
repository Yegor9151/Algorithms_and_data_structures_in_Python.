"""1. Проанализировать скорость и сложность одного любого алгоритма из разработанных в рамках домашнего задания первыхтрех уроков.Примечание. Идеальным решением будет:a. выбрать хорошую задачу, которую имеет смысл оценивать,b. написать 3 варианта кода (один у вас уже есть),c. проанализировать 3 варианта и выбрать оптимальный,d. результаты анализа вставить в виде комментариев в файл с кодом(не забудьте указать, для каких N вы проводили замеры),e. написать общий вывод: какой из трёх вариантов лучше и почему.Sample:В массиве найти максимальный отрицательный элемент. Вывести на экран его значение и позицию в массиве.Примечание к задаче: пожалуйста не путайте «минимальный» и «максимальный отрицательный».Это два абсолютно разных значения."""import randomimport cProfiledef gen_array(n):    return [random.randint(-1000, 1000) for _ in range(n)]def max_from_min1(n: int) -> int:    sub_zero = [i for i in gen_array(n) if i < 0]    num = float('-inf')    for i in sub_zero:        if i > num:            num = i    return numdef max_from_min2(n: int) -> int:    num = float('-inf')    for i in gen_array(n):        if i < 0 and i ** 2 < num ** 2:            num = i    return numdef max_from_min3(n: int) -> int:    num = float('-inf')    for i in gen_array(n):        if num < i < 0:            num = i    return num# cProfile.runctx('max_from_min1(10000000)', globals(), locals())# cProfile.runctx('max_from_min2(10000000)', globals(), locals())# cProfile.runctx('max_from_min3(10000000)', globals(), locals())